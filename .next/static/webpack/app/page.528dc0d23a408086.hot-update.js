"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/utils/DDLParser.ts":
/*!********************************!*\
  !*** ./app/utils/DDLParser.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ DDLParser; }\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n\nclass DDLParser {\n    /**\n   * Main method to parse DDL and generate nodes and edges\n   * @returns Object containing nodes and edges\n   */ parse() {\n        // Split the DDL into separate statements\n        const statements = this.splitStatements(this.ddl);\n        console.log(\"Parsing \".concat(statements.length, \" SQL statements\"));\n        // First pass: Create all table nodes\n        for (const statement of statements){\n            if (this.isCreateTableStatement(statement)) {\n                this.parseCreateTable(statement);\n            }\n        }\n        // Second pass: Handle foreign key relationships\n        for (const statement of statements){\n            if (this.isAlterTableAddForeignKey(statement)) {\n                this.parseForeignKeyConstraint(statement);\n            }\n        }\n        console.log(\"Created \".concat(this.nodes.length, \" tables and \").concat(this.edges.length, \" relationships\"));\n        return {\n            nodes: this.nodes,\n            edges: this.edges\n        };\n    }\n    /**\n   * Split DDL into separate SQL statements\n   * Handles multiple statements separated by semicolons, accounting for quoted text\n   * and nested statements.\n   */ splitStatements(ddl) {\n        // Split by semicolons, but ignore semicolons inside quotes\n        const statements = [];\n        let currentStatement = \"\";\n        let inQuote = false;\n        let quoteChar = \"\";\n        let inComment = false;\n        for(let i = 0; i < ddl.length; i++){\n            const char = ddl[i];\n            const nextChar = i < ddl.length - 1 ? ddl[i + 1] : \"\";\n            // Handle line comments\n            if (!inQuote && char === \"-\" && nextChar === \"-\") {\n                inComment = true;\n            }\n            // End of line terminates comments\n            if (inComment && (char === \"\\n\" || char === \"\\r\")) {\n                inComment = false;\n            }\n            // Skip comment content but keep adding to current statement\n            if (inComment) {\n                currentStatement += char;\n                continue;\n            }\n            // Handle quotes\n            if ((char === \"'\" || char === '\"') && (i === 0 || ddl[i - 1] !== \"\\\\\")) {\n                if (!inQuote) {\n                    inQuote = true;\n                    quoteChar = char;\n                } else if (char === quoteChar) {\n                    inQuote = false;\n                }\n            }\n            // Handle semicolons\n            if (char === \";\" && !inQuote) {\n                if (currentStatement.trim()) {\n                    statements.push(currentStatement.trim());\n                }\n                currentStatement = \"\";\n            } else {\n                currentStatement += char;\n            }\n        }\n        // Add the last statement if there's no trailing semicolon\n        if (currentStatement.trim()) {\n            statements.push(currentStatement.trim());\n        }\n        // Filter out any empty statements\n        return statements.filter((stmt)=>stmt.trim().length > 0);\n    }\n    /**\n   * Check if a statement is a CREATE TABLE statement\n   */ isCreateTableStatement(statement) {\n        return /CREATE\\s+(OR\\s+REPLACE\\s+)?(TABLE|VIEW|MATERIALIZED_VIEW|DYNAMIC_TABLE|ICEBERG_TABLE)\\s+/i.test(statement);\n    }\n    /**\n   * Check if a statement is an ALTER TABLE ADD FOREIGN KEY statement\n   */ isAlterTableAddForeignKey(statement) {\n        return /ALTER\\s+TABLE.*ADD\\s+(CONSTRAINT\\s+\\w+\\s+)?FOREIGN\\s+KEY/i.test(statement);\n    }\n    /**\n   * Parse a CREATE TABLE statement and add to nodes\n   */ parseCreateTable(statement) {\n        var _typeMatch_;\n        // Extract table type (TABLE, VIEW, etc.)\n        const typeMatch = statement.match(/CREATE\\s+(OR\\s+REPLACE\\s+)?(TABLE|VIEW|MATERIALIZED_VIEW|DYNAMIC_TABLE|ICEBERG_TABLE)\\s+/i);\n        const tableType = (typeMatch === null || typeMatch === void 0 ? void 0 : (_typeMatch_ = typeMatch[2]) === null || _typeMatch_ === void 0 ? void 0 : _typeMatch_.toUpperCase()) || \"TABLE\";\n        // Extract fully qualified table name - allow for quotes around each part or the whole name\n        // Format can be: \"DB\".\"SCHEMA\".\"TABLE\" or DB.SCHEMA.TABLE or combinations\n        const qualifiedNameRegex = /CREATE\\s+(OR\\s+REPLACE\\s+)?(TABLE|VIEW|MATERIALIZED_VIEW|DYNAMIC_TABLE|ICEBERG_TABLE)\\s+(?:(?:\"([^\"]+)\"|([a-zA-Z0-9_]+))(?:\\.(?:\"([^\"]+)\"|([a-zA-Z0-9_]+)))?(?:\\.(?:\"([^\"]+)\"|([a-zA-Z0-9_]+)))?|\"([^\"]+\\.[^\"]+(?:\\.[^\"]+)?)\"|([a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+(?:\\.[a-zA-Z0-9_]+)?))/i;\n        const nameMatch = statement.match(qualifiedNameRegex);\n        if (!nameMatch) return;\n        // Extract the parts of the qualified name (database, schema, table)\n        let fullTableName = \"\";\n        let tableName = \"\";\n        // Check if we matched a fully quoted name like \"DB.SCHEMA.TABLE\"\n        if (nameMatch[9]) {\n            fullTableName = nameMatch[9];\n            const parts = fullTableName.split(\".\");\n            tableName = parts[parts.length - 1];\n        } else if (nameMatch[10]) {\n            fullTableName = nameMatch[10];\n            const parts = fullTableName.split(\".\");\n            tableName = parts[parts.length - 1];\n        } else {\n            const dbPart = nameMatch[3] || nameMatch[4] || \"\";\n            const schemaPart = nameMatch[5] || nameMatch[6] || \"\";\n            const tableNamePart = nameMatch[7] || nameMatch[8] || \"\";\n            if (tableNamePart) {\n                // We have a three-part name: DB.SCHEMA.TABLE\n                tableName = tableNamePart;\n                fullTableName = \"\".concat(dbPart, \".\").concat(schemaPart, \".\").concat(tableName);\n            } else if (schemaPart) {\n                // We have a two-part name: SCHEMA.TABLE\n                tableName = schemaPart;\n                fullTableName = \"\".concat(dbPart, \".\").concat(tableName);\n            } else {\n                // We have just a table name\n                tableName = dbPart;\n                fullTableName = tableName;\n            }\n        }\n        if (!tableName) return;\n        // Use the full name for display but keep the simple table name for internal reference\n        const normalizedTableName = tableName.toUpperCase();\n        // Extract columns from the statement\n        const columnsSection = this.extractColumnDefinitions(statement);\n        const columns = this.parseColumns(columnsSection, statement);\n        // Extract table comment if present\n        const commentMatch = statement.match(/COMMENT\\s*=\\s*'([^']*)'/i);\n        const comment = commentMatch ? commentMatch[1].replace(/''/, \"'\") : \"\";\n        // Extract tags if present\n        const tagsMatch = statement.match(/WITH\\s+TAG\\s+\\(([^)]*)\\)/i);\n        let tags = [];\n        if (tagsMatch) {\n            const tagsText = tagsMatch[1];\n            // Extract tag names from tag expressions like 'tag1' = 'true'\n            const tagRegex = /'([^']+)'\\s*=\\s*'true'/g;\n            let tagMatch;\n            while((tagMatch = tagRegex.exec(tagsText)) !== null){\n                tags.push(tagMatch[1]);\n            }\n        }\n        // Create the node\n        const nodeId = \"table-\".concat((0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])());\n        this.tableNames.set(normalizedTableName, nodeId);\n        const node = {\n            id: nodeId,\n            type: \"table\",\n            position: {\n                x: Math.floor(Math.random() * 500),\n                y: Math.floor(Math.random() * 300)\n            },\n            data: {\n                label: fullTableName,\n                columns,\n                tableType: tableType,\n                comment,\n                tags\n            }\n        };\n        this.nodes.push(node);\n    }\n    /**\n   * Extract column definitions section from CREATE TABLE statement\n   */ extractColumnDefinitions(statement) {\n        // Get content between the first ( and the matching )\n        const startIdx = statement.indexOf(\"(\");\n        if (startIdx === -1) return \"\";\n        let depth = 1;\n        let endIdx = startIdx + 1;\n        for(let i = startIdx + 1; i < statement.length; i++){\n            if (statement[i] === \"(\") depth++;\n            else if (statement[i] === \")\") depth--;\n            if (depth === 0) {\n                endIdx = i;\n                break;\n            }\n        }\n        return statement.substring(startIdx + 1, endIdx).trim();\n    }\n    /**\n   * Parse column definitions into Column objects\n   */ parseColumns(columnsSection, fullStatement) {\n        const columns = [];\n        const lines = columnsSection.split(\",\\n\").map((line)=>line.trim());\n        let primaryKeyColumns = [];\n        // Extract primary key constraint if present\n        const primaryKeyMatch = columnsSection.match(/PRIMARY\\s+KEY\\s*\\(([^)]+)\\)/i);\n        if (primaryKeyMatch) {\n            primaryKeyColumns = primaryKeyMatch[1].split(\",\").map((col)=>col.trim().replace(/\"/g, \"\").toUpperCase());\n        }\n        // Process each column definition\n        for (const line of lines){\n            // Skip if line is a constraint definition\n            if (/^(PRIMARY|FOREIGN|UNIQUE)\\s+KEY/i.test(line)) continue;\n            // Extract column name\n            const nameMatch = line.match(/^(?:\"([^\"]+)\"|([a-zA-Z0-9_]+))\\s+/);\n            if (!nameMatch) continue;\n            const name = nameMatch[1] || nameMatch[2];\n            // Extract data type\n            const typeMatch = line.match(/\\s+([a-zA-Z0-9_]+(\\([^)]+\\))?)/);\n            const dataType = typeMatch ? typeMatch[1] : \"VARCHAR\";\n            // Check if column is nullable\n            const isNullable = !/NOT\\s+NULL/i.test(line);\n            // Check if column is a primary key\n            const isPrimaryKey = primaryKeyColumns.includes(name.toUpperCase());\n            // Extract comment if present\n            const commentMatch = line.match(/COMMENT\\s+'([^']*)'/i);\n            const comment = commentMatch ? commentMatch[1].replace(/''/, \"'\") : \"\";\n            // Parse column-level tags from full statement\n            let tags = [];\n            const tagRegex = new RegExp('ALTER\\\\s+TABLE.*MODIFY\\\\s+COLUMN\\\\s+(?:\"'.concat(name, '\"|').concat(name, \")\\\\s+SET\\\\s+TAG\\\\s+([^;]+)\"), \"i\");\n            const tagsMatch = fullStatement.match(tagRegex);\n            if (tagsMatch) {\n                const tagsText = tagsMatch[1];\n                // Extract tag names from tag expressions\n                const tagNameRegex = /'([^']+)'\\s*=\\s*'true'/g;\n                let tagMatch;\n                while((tagMatch = tagNameRegex.exec(tagsText)) !== null){\n                    tags.push(tagMatch[1]);\n                }\n            }\n            columns.push({\n                id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n                name,\n                dataType,\n                isPrimaryKey,\n                isForeignKey: false,\n                isNullable,\n                comment,\n                tags\n            });\n        }\n        return columns;\n    }\n    /**\n   * Parse a foreign key constraint and create relationships\n   */ parseForeignKeyConstraint(statement) {\n        // Extract source table name (may be fully qualified)\n        const tableMatch = statement.match(/ALTER\\s+TABLE\\s+(?:\"([^\"]+(?:\\.[^\"]+)*?)\"|([a-zA-Z0-9_]+(?:\\.[a-zA-Z0-9_]+)*))/i);\n        if (!tableMatch) return;\n        // Get the full name and extract just the table part for lookup\n        const fullSourceName = tableMatch[1] || tableMatch[2];\n        const sourceParts = fullSourceName.split(\".\");\n        const tableName = sourceParts[sourceParts.length - 1].toUpperCase();\n        // Extract source columns\n        const sourceColsMatch = statement.match(/FOREIGN\\s+KEY\\s*\\(([^)]+)\\)/i);\n        if (!sourceColsMatch) return;\n        const sourceCols = sourceColsMatch[1].split(\",\").map((col)=>col.trim().replace(/\"/g, \"\").toUpperCase());\n        // Extract target table and columns\n        const refsMatch = statement.match(/REFERENCES\\s+(?:\"([^\"]+(?:\\.[^\"]+)*?)\"|([a-zA-Z0-9_]+(?:\\.[a-zA-Z0-9_]+)*))\\s*\\(([^)]+)\\)/i);\n        if (!refsMatch) return;\n        // Get the full target name and extract just the table part for lookup\n        const fullTargetName = refsMatch[1] || refsMatch[2];\n        const targetParts = fullTargetName.split(\".\");\n        const targetTable = targetParts[targetParts.length - 1].toUpperCase();\n        const targetCols = refsMatch[3].split(\",\").map((col)=>col.trim().replace(/\"/g, \"\").toUpperCase());\n        // Find matching source and target nodes\n        let sourceNode = null;\n        let targetNode = null;\n        let sourceId = \"\";\n        let targetId = \"\";\n        // First try exact match using the tableNames map\n        if (this.tableNames.has(tableName) && this.tableNames.has(targetTable)) {\n            sourceId = this.tableNames.get(tableName);\n            targetId = this.tableNames.get(targetTable);\n            sourceNode = this.nodes.find((node)=>node.id === sourceId);\n            targetNode = this.nodes.find((node)=>node.id === targetId);\n        }\n        // If that fails, try matching by label (which may include full paths)\n        if (!sourceNode || !targetNode) {\n            for (const node of this.nodes){\n                if (node.type === \"table\") {\n                    const nodeLabel = node.data.label.toUpperCase();\n                    // Check if node label matches full source name\n                    if (!sourceNode && (nodeLabel === fullSourceName.toUpperCase() || nodeLabel.endsWith(\".\" + tableName))) {\n                        sourceNode = node;\n                        sourceId = node.id;\n                    }\n                    // Check if node label matches full target name\n                    if (!targetNode && (nodeLabel === fullTargetName.toUpperCase() || nodeLabel.endsWith(\".\" + targetTable))) {\n                        targetNode = node;\n                        targetId = node.id;\n                    }\n                }\n            }\n        }\n        // If we have both source and target nodes\n        if (sourceNode && targetNode && sourceNode.type === \"table\" && targetNode.type === \"table\") {\n            // Update source columns to mark them as foreign keys\n            for(let i = 0; i < sourceCols.length && i < targetCols.length; i++){\n                const columnName = sourceCols[i];\n                const column = sourceNode.data.columns.find((col)=>col.name.toUpperCase() === columnName);\n                if (column) {\n                    column.isForeignKey = true;\n                    column.referencedTable = targetNode.data.label; // Use full label\n                    column.referencedColumn = targetCols[i];\n                }\n            }\n            // Create an edge between the tables\n            const edge = {\n                id: \"e\".concat(sourceId, \"-\").concat(targetId, \"-\").concat((0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])()),\n                source: sourceId,\n                target: targetId,\n                sourceHandle: \"\",\n                targetHandle: \"\",\n                type: \"relationship\",\n                data: {\n                    relationshipType: \"one-to-many\"\n                }\n            };\n            this.edges.push(edge);\n        } else {\n            console.warn(\"Could not create relationship between \".concat(fullSourceName, \" and \").concat(fullTargetName, \" - tables not found\"));\n        }\n    }\n    constructor(ddl){\n        this.nodes = [];\n        this.edges = [];\n        this.tableNames = new Map() // Maps normalized table name to table ID\n        ;\n        this.ddl = ddl;\n    }\n}\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/utils/DDLParser.ts\n"));

/***/ })

});